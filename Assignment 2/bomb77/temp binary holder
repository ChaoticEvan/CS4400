PHASE 3: 
   0x0000000000400f53 <+0>:	sub    $0x18,%rsp
   0x0000000000400f57 <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f5c <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f61 <+14>:	mov    $0x40280d,%esi
   0x0000000000400f66 <+19>:	mov    $0x0,%eax
   0x0000000000400f6b <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f70 <+29>:	cmp    $0x1,%eax
   0x0000000000400f73 <+32>:	jg     0x400f7a <phase_3+39>
   0x0000000000400f75 <+34>:	callq  0x401574 <explode_bomb>
   0x0000000000400f7a <+39>:	cmpl   $0x7,0xc(%rsp)
   0x0000000000400f7f <+44>:	ja     0x400fbd <phase_3+106>
   0x0000000000400f81 <+46>:	mov    0xc(%rsp),%eax
   0x0000000000400f85 <+50>:	jmpq   *0x402540(,%rax,8)
   0x0000000000400f8c <+57>:	mov    $0x11b,%eax
   0x0000000000400f91 <+62>:	jmp    0x400fce <phase_3+123>
   0x0000000000400f93 <+64>:	mov    $0x2d8,%eax
   0x0000000000400f98 <+69>:	jmp    0x400fce <phase_3+123>
   0x0000000000400f9a <+71>:	mov    $0x65,%eax
   0x0000000000400f9f <+76>:	jmp    0x400fce <phase_3+123>
   0x0000000000400fa1 <+78>:	mov    $0x176,%eax
   0x0000000000400fa6 <+83>:	jmp    0x400fce <phase_3+123>
   0x0000000000400fa8 <+85>:	mov    $0x18d,%eax
   0x0000000000400fad <+90>:	jmp    0x400fce <phase_3+123>
   0x0000000000400faf <+92>:	mov    $0x191,%eax
   0x0000000000400fb4 <+97>:	jmp    0x400fce <phase_3+123>
   0x0000000000400fb6 <+99>:	mov    $0x315,%eax
   0x0000000000400fbb <+104>:	jmp    0x400fce <phase_3+123>
   0x0000000000400fbd <+106>:	callq  0x401574 <explode_bomb>
   0x0000000000400fc2 <+111>:	mov    $0x0,%eax
   0x0000000000400fc7 <+116>:	jmp    0x400fce <phase_3+123>
   0x0000000000400fc9 <+118>:	mov    $0x26c,%eax
   0x0000000000400fce <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400fd2 <+127>:	je     0x400fd9 <phase_3+134>
   0x0000000000400fd4 <+129>:	callq  0x401574 <explode_bomb>
   0x0000000000400fd9 <+134>:	add    $0x18,%rsp
   0x0000000000400fdd <+138>:	retq 

strings_not_equal: 

   0x000000000040130e <+0>:	push   %r12
   0x0000000000401310 <+2>:	push   %rbp
   0x0000000000401311 <+3>:	push   %rbx
   0x0000000000401312 <+4>:	mov    %rdi,%rbx
   0x0000000000401315 <+7>:	mov    %rsi,%rbp
   0x0000000000401318 <+10>:	callq  0x4012f1 <string_length>
   0x000000000040131d <+15>:	mov    %eax,%r12d
   0x0000000000401320 <+18>:	mov    %rbp,%rdi
   0x0000000000401323 <+21>:	callq  0x4012f1 <string_length>
   0x0000000000401328 <+26>:	mov    $0x1,%edx
   0x000000000040132d <+31>:	cmp    %eax,%r12d
   0x0000000000401330 <+34>:	jne    0x401370 <strings_not_equal+98>
   0x0000000000401332 <+36>:	movzbl (%rbx),%eax
   0x0000000000401335 <+39>:	test   %al,%al
   0x0000000000401337 <+41>:	je     0x40135d <strings_not_equal+79>
   0x0000000000401339 <+43>:	cmp    0x0(%rbp),%al
   0x000000000040133c <+46>:	je     0x401347 <strings_not_equal+57>
   0x000000000040133e <+48>:	xchg   %ax,%ax
   0x0000000000401340 <+50>:	jmp    0x401364 <strings_not_equal+86>
   0x0000000000401342 <+52>:	cmp    0x0(%rbp),%al
   0x0000000000401345 <+55>:	jne    0x40136b <strings_not_equal+93>
   0x0000000000401347 <+57>:	add    $0x1,%rbx
   0x000000000040134b <+61>:	add    $0x1,%rbp
   0x000000000040134f <+65>:	movzbl (%rbx),%eax
   0x0000000000401352 <+68>:	test   %al,%al
   0x0000000000401354 <+70>:	jne    0x401342 <strings_not_equal+52>
   0x0000000000401356 <+72>:	mov    $0x0,%edx
   0x000000000040135b <+77>:	jmp    0x401370 <strings_not_equal+98>
   0x000000000040135d <+79>:	mov    $0x0,%edx
   0x0000000000401362 <+84>:	jmp    0x401370 <strings_not_equal+98>
   0x0000000000401364 <+86>:	mov    $0x1,%edx
   0x0000000000401369 <+91>:	jmp    0x401370 <strings_not_equal+98>
   0x000000000040136b <+93>:	mov    $0x1,%edx
   0x0000000000401370 <+98>:	mov    %edx,%eax
   0x0000000000401372 <+100>:	pop    %rbx
   0x0000000000401373 <+101>:	pop    %rbp
   0x0000000000401374 <+102>:	pop    %r12
   0x0000000000401376 <+104>:	retq 

read_line: 
   0x00000000004015ec <+0>:	sub    $0x8,%rsp
   0x00000000004015f0 <+4>:	mov    $0x0,%eax
   0x00000000004015f5 <+9>:	callq  0x40146f <skip>
   0x00000000004015fa <+14>:	test   %rax,%rax
   0x00000000004015fd <+17>:	jne    0x40166d <read_line+129>
   0x00000000004015ff <+19>:	mov    0x203182(%rip),%rax        # 0x604788 <stdin@@GLIBC_2.2.5>
   0x0000000000401606 <+26>:	cmp    %rax,0x203193(%rip)        # 0x6047a0 <infile>
   0x000000000040160d <+33>:	jne    0x401623 <read_line+55>
   0x000000000040160f <+35>:	mov    $0x402813,%edi
   0x0000000000401614 <+40>:	callq  0x400b40 <puts@plt>
   0x0000000000401619 <+45>:	mov    $0x8,%edi
   0x000000000040161e <+50>:	callq  0x400c80 <exit@plt>
   0x0000000000401623 <+55>:	mov    $0x402831,%edi
   0x0000000000401628 <+60>:	callq  0x400b00 <getenv@plt>
   0x000000000040162d <+65>:	test   %rax,%rax
   0x0000000000401630 <+68>:	je     0x40163c <read_line+80>
   0x0000000000401632 <+70>:	mov    $0x0,%edi
   0x0000000000401637 <+75>:	callq  0x400c80 <exit@plt>
   0x000000000040163c <+80>:	mov    0x203145(%rip),%rax        # 0x604788 <stdin@@GLIBC_2.2.5>
   0x0000000000401643 <+87>:	mov    %rax,0x203156(%rip)        # 0x6047a0 <infile>
   0x000000000040164a <+94>:	mov    $0x0,%eax
   0x000000000040164f <+99>:	callq  0x40146f <skip>
   0x0000000000401654 <+104>:	test   %rax,%rax
   0x0000000000401657 <+107>:	jne    0x40166d <read_line+129>
   0x0000000000401659 <+109>:	mov    $0x402813,%edi
   0x000000000040165e <+114>:	callq  0x400b40 <puts@plt>
   0x0000000000401663 <+119>:	mov    $0x0,%edi
   0x0000000000401668 <+124>:	callq  0x400c80 <exit@plt>
   0x000000000040166d <+129>:	mov    0x203129(%rip),%edx        # 0x60479c <num_input_strings>
   0x0000000000401673 <+135>:	movslq %edx,%rax
   0x0000000000401676 <+138>:	lea    (%rax,%rax,4),%rsi
   0x000000000040167a <+142>:	shl    $0x4,%rsi
   0x000000000040167e <+146>:	add    $0x6047c0,%rsi
   0x0000000000401685 <+153>:	mov    %rsi,%rdi
   0x0000000000401688 <+156>:	mov    $0x0,%eax
   0x000000000040168d <+161>:	mov    $0xffffffffffffffff,%rcx
   0x0000000000401694 <+168>:	repnz scas %es:(%rdi),%al
   0x0000000000401696 <+170>:	not    %rcx
   0x0000000000401699 <+173>:	sub    $0x1,%rcx
   0x000000000040169d <+177>:	cmp    $0x4e,%ecx   0x00000000004016a0 <+180>:	jle    0x4016e8 <read_line+252>
   0x00000000004016a2 <+182>:	mov    $0x40283c,%edi
   0x00000000004016a7 <+187>:	callq  0x400b40 <puts@plt>
   0x00000000004016ac <+192>:	mov    0x2030ea(%rip),%eax        # 0x60479c <num_input_strings>
   0x00000000004016b2 <+198>:	lea    0x1(%rax),%edx
   0x00000000004016b5 <+201>:	mov    %edx,0x2030e1(%rip)        # 0x60479c <num_input_strings>
   0x00000000004016bb <+207>:	cltq   
   0x00000000004016bd <+209>:	imul   $0x50,%rax,%rax
   0x00000000004016c1 <+213>:	movabs $0x636e7572742a2a2a,%rdi
   0x00000000004016cb <+223>:	mov    %rdi,0x6047c0(%rax)
   0x00000000004016d2 <+230>:	movabs $0x2a2a2a64657461,%rdi
   0x00000000004016dc <+240>:	mov    %rdi,0x6047c8(%rax)
   0x00000000004016e3 <+247>:	callq  0x401574 <explode_bomb>
   0x00000000004016e8 <+252>:	sub    $0x1,%ecx
   0x00000000004016eb <+255>:	movslq %ecx,%rcx
   0x00000000004016ee <+258>:	movslq %edx,%rax
   0x00000000004016f1 <+261>:	lea    (%rax,%rax,4),%rax
   0x00000000004016f5 <+265>:	shl    $0x4,%rax
   0x00000000004016f9 <+269>:	movb   $0x0,0x6047c0(%rcx,%rax,1)
   0x0000000000401701 <+277>:	add    $0x1,%edx
   0x0000000000401704 <+280>:	mov    %edx,0x203092(%rip)        # 0x60479c <nu--Type <RET> for more, q to quit, c to continue without paging--m_input_strings>
   0x000000000040170a <+286>:	mov    %rsi,%rax
   0x000000000040170d <+289>:	add    $0x8,%rsp
   0x0000000000401711 <+293>:	retq   

strings:
    /lib64/ld-linux-x86-64.so.2
    libc.so.6
    socket
    fflush
    strcpy
    exit
    sprintf
    fopen
    __isoc99_sscanf
    connect
    signal
    puts
    stdin
    strtol
    fgets
    __errno_location
    read
    stdout
    memcpy
    strcasecmp
    __ctype_b_loc
    getenv
    stderr
    alarm
    gethostbyname
    gethostname
    bcopy
    close
    fprintf
    sleep
    __libc_start_main
    write
    __gmon_start__
    GLIBC_2.3
    GLIBC_2.7
    GLIBC_2.14
    GLIBC_2.2.5
    %z4 
    %r4 
    %j4 
    %b4 
    %Z4 
    %R4 
    %J4 
    %B4 
    %:4 
    %24 
    =!: 
    AVAUATUSH
    l$0L
    t$HL
    t$0H
    P[]A\A]A^
    ATUSH
    t$:E
    []A\
    ***truncH
    ated***
    =u0 
    AWAVAUATUSH
    D$/A
    H;D$
    8[]A\A]A^A_
    AWAVAUATUSH
    Error: CI
    lient unI
    able to I
    create sI
    F ockefA
    Error: DI
    NS is unI
    able to I
    resolve I
    server aI
    F(ddrefA
    F,ssA
    Error: UI
    nable toI
    connectI
    to the I
    F servfA
    F$erA
    Error: RI
    esult stI
    ring tooI
    large. I
    IncreaseI
    SUBMITRI
    _MAXBUF
    <_v	
    Error: CI
    lient unI
    able to I
    write toI
    the serI
    F(ver
    Error: CI
    lient unI
    able to I
    read firI
    st headeI
    r from sI
    F0ervefA
    D$0H
    Error: CI
    lient unI
    able to I
    read heaI
    ders froI
    m serverI
    Error: CI
    lient unI
    able to I
    read staI
    tus messI
    age fromI
    server
    Error: RI
    esult stI
    ring conI
    tains anI
    illegalI
    or unprI
    intable I
    characteI
    F8fA
    F@r.A
    []A\A]A^A_
    Error: CH
    lient unH
    able to H
    create sH
    E ockef
    Error: DH
    NS is unH
    able to H
    resolve H
    server aH
    E(ddref
    E,ss
    []A\A]A^A_
    %s: Error: Couldn't open %s
    Usage: %s [<input_file>]
    That's number 2.  Keep going!
    Halfway there!
    Good work!  On to the next...
    Welcome to my fiendish little bomb. You have 6 phases with
    which to blow yourself up. Have a nice day!
    Phase 1 defused. How about the next one?
    So you got that one.  Try this one.
    He is evil and fits easily into most overhead storage bins.
    Wow! You've defused the secret stage!
    So you think you can stop the bomb with ctrl-c, do you?
    Initialization error: Running on an illegal host [1]
    Initialization error: Running on an illegal host [2]
    ERROR: Input string is too large.
    Your instructor has been notified.
    Curses, you've found the secret phase!
    But finding it and solving it are quite different...
    Congratulations! You've defused the bomb!
    Your instructor has been notified and will verify your solution.
    Well...
    OK. :-)
    Invalid phase%s
    Initialization error:
    defused
    exploded
    %d:%s:%d:%s
    BOOM!!!
    The bomb has blown up.
    %d %d %d %d %d %d
    Error: Premature EOF on stdin
    GRADE_BOMB
    Error: Input line too long
    %d %d %s
    DrEvil
    lab1-1.eng.utah.edu
    lab1-2.eng.utah.edu
    lab1-3.eng.utah.edu
    lab1-4.eng.utah.edu
    lab1-5.eng.utah.edu
    lab1-6.eng.utah.edu
    lab1-7.eng.utah.edu
    lab1-8.eng.utah.edu
    lab1-9.eng.utah.edu
    lab1-10.eng.utah.edu
    lab1-11.eng.utah.edu
    lab1-12.eng.utah.edu
    lab1-13.eng.utah.edu
    lab1-14.eng.utah.edu
    lab1-15.eng.utah.edu
    lab1-16.eng.utah.edu
    lab1-17.eng.utah.edu
    lab1-18.eng.utah.edu
    lab1-19.eng.utah.edu
    lab1-20.eng.utah.edu
    lab1-21.eng.utah.edu
    lab1-22.eng.utah.edu
    lab1-23.eng.utah.edu
    lab1-24.eng.utah.edu
    lab1-25.eng.utah.edu
    lab1-26.eng.utah.edu
    lab1-27.eng.utah.edu
    lab1-28.eng.utah.edu
    lab1-29.eng.utah.edu
    lab1-30.eng.utah.edu
    lab1-31.eng.utah.edu
    lab1-32.eng.utah.edu
    lab1-33.eng.utah.edu
    lab1-34.eng.utah.edu
    lab1-35.eng.utah.edu
    lab1-36.eng.utah.edu
    lab1-37.eng.utah.edu
    lab1-38.eng.utah.edu
    lab1-39.eng.utah.edu
    lab1-40.eng.utah.edu
    Program timed out after %d seconds
    Error: HTTP request failed with error %d: %s
    GET /%s/submitr.pl/?userid=%s&userpwd=%s&lab=%s&result=%s&submit=submit HTTP/1.0
    Error: Unable to connect to server %s
    %%%02X
    %s %d %[a-zA-z ]
    cs4400.eng.utah.edu
    AUTORESULT_STRING=%s
    Spring20
    csapp
    ;*3$"
    WsQg2vFyDs0pKqXnO0E4
    u1087559
    GCC: (GNU) 4.8.5 20150623 (Red Hat 4.8.5-39)
    /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include
    /usr/include/bits
    /usr/include
    bomb.c
    stddef.h
    types.h
    stdio.h
    libio.h
    stdlib.h
    phases.h
    support.h
    <built-in>
    printf
    __off_t
    _IO_read_ptr
    _chain
    size_t
    _shortbuf
    _IO_buf_base
    long long unsigned int
    read_line
    long long int
    phase_defused
    _fileno
    _IO_read_end
    _flags
    _IO_buf_end
    _cur_column
    _old_offset
    infile
    initialize_bomb
    _IO_marker
    stdin
    _IO_write_ptr
    _sbuf
    short unsigned int
    _IO_save_base
    _lock
    _flags2
    _mode
    __builtin_puts
    stdout
    sizetype
    /home/cs4400/Spring20/bomblab/src
    _IO_write_end
    _IO_lock_t
    _IO_FILE
    fopen
    _pos
    _markers
    GNU C 4.8.5 20150623 (Red Hat 4.8.5-39) -mtune=generic -march=x86-64 -ggdb -O1
    unsigned char
    short int
    _vtable_offset
    exit
    bomb.c
    input
    _next
    __off64_t
    _IO_read_base
    _IO_save_end
    __pad1
    __pad2
    __pad3
    __pad4
    __pad5
    _unused2
    argv
    phase_1
    phase_2
    phase_3
    phase_4
    phase_5
    phase_6
    _IO_backup_base
    argc
    main
    _IO_write_base
    crtstuff.c
    __JCR_LIST__
    deregister_tm_clones
    __do_global_dtors_aux
    completed.6355
    __do_global_dtors_aux_fini_array_entry
    frame_dummy
    __frame_dummy_init_array_entry
    bomb.c
    phases.c
    array.3161
    support.c
    sig_handler
    driverlib.c
    rio_readlineb
    __FRAME_END__
    __JCR_END__
    __init_array_end
    _DYNAMIC
    __init_array_start
    __GNU_EH_FRAME_HDR
    _GLOBAL_OFFSET_TABLE_
    __libc_csu_fini
    skip
    getenv@@GLIBC_2.2.5
    phase_defused
    strcasecmp@@GLIBC_2.2.5
    __errno_location@@GLIBC_2.2.5
    stdout@@GLIBC_2.2.5
    strcpy@@GLIBC_2.2.5
    puts@@GLIBC_2.2.5
    stdin@@GLIBC_2.2.5
    write@@GLIBC_2.2.5
    _edata
    num_input_strings
    phase_5
    initialize_bomb_solve
    blank_line
    submitr
    phase_3
    phase_1
    invalid_phase
    init_driver
    alarm@@GLIBC_2.2.5
    close@@GLIBC_2.2.5
    node3
    read@@GLIBC_2.2.5
    __libc_start_main@@GLIBC_2.2.5
    fgets@@GLIBC_2.2.5
    explode_bomb
    node1
    __data_start
    signal@@GLIBC_2.2.5
    gethostbyname@@GLIBC_2.2.5
    node5
    fprintf@@GLIBC_2.2.5
    __gmon_start__
    strtol@@GLIBC_2.2.5
    fun7
    __dso_handle
    memcpy@@GLIBC_2.14
    _IO_stdin_used
    host_table
    func4
    string_length
    __libc_csu_init
    fflush@@GLIBC_2.2.5
    __isoc99_sscanf@@GLIBC_2.7
    secret_phase
    infile
    sigalrm_handler
    init_timeout
    __bss_start
    userid
    main
    bcopy@@GLIBC_2.2.5
    read_line
    strings_not_equal
    phase_4
    fopen@@GLIBC_2.2.5
    phase_6
    scratch
    driver_post
    send_msg
    phase_2
    gethostname@@GLIBC_2.2.5
    sprintf@@GLIBC_2.2.5
    exit@@GLIBC_2.2.5
    bomb_id
    connect@@GLIBC_2.2.5
    __TMC_END__
    node2
    node4
    user_password
    sleep@@GLIBC_2.2.5
    node6
    read_six_numbers
    initialize_bomb
    __ctype_b_loc@@GLIBC_2.3
    stderr@@GLIBC_2.2.5
    socket@@GLIBC_2.2.5
    .symtab
    .strtab
    .shstrtab
    .interp
    .note.ABI-tag
    .note.gnu.build-id
    .gnu.hash
    .dynsym
    .dynstr
    .gnu.version
    .gnu.version_r
    .rela.dyn
    .rela.plt
    .init
    .text
    .fini
    .rodata
    .eh_frame_hdr
    .eh_frame
    .init_array
    .fini_array
    .jcr
    .dynamic
    .got
    .got.plt
    .data
    .bss
    .comment
    .debug_aranges
    .debug_info
    .debug_abbrev
    .debug_line
    .debug_str
    .debug_loc
